{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c312435f-7d2f-4d01-a9e7-79cd95a30cf3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "22f3a80f-3c81-4628-b01d-f3c54e94540d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel(\"Données_Conso_Stage_IA.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "416a3403-4a8a-48d6-9d81-8ec185d4d8fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID Consommateur</th>\n",
       "      <th>Âge</th>\n",
       "      <th>Sexe</th>\n",
       "      <th>Catégorie de produit acheté</th>\n",
       "      <th>Prix du produit</th>\n",
       "      <th>Date d'achat</th>\n",
       "      <th>Quantité</th>\n",
       "      <th>Canal d'achat</th>\n",
       "      <th>Engagement sur les réseaux sociaux</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>c0732317-563e-4f44-b87c-b25a0e4d8985</td>\n",
       "      <td>35</td>\n",
       "      <td>Femme</td>\n",
       "      <td>Alimentation</td>\n",
       "      <td>541.85</td>\n",
       "      <td>2023-11-21</td>\n",
       "      <td>2</td>\n",
       "      <td>Magasin</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>c0732317-563e-4f44-b87c-b25a0e4d8985</td>\n",
       "      <td>35</td>\n",
       "      <td>Femme</td>\n",
       "      <td>Électronique</td>\n",
       "      <td>854.76</td>\n",
       "      <td>2023-06-15</td>\n",
       "      <td>2</td>\n",
       "      <td>Online</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>c0732317-563e-4f44-b87c-b25a0e4d8985</td>\n",
       "      <td>35</td>\n",
       "      <td>Femme</td>\n",
       "      <td>Alimentation</td>\n",
       "      <td>169.68</td>\n",
       "      <td>2024-04-05</td>\n",
       "      <td>3</td>\n",
       "      <td>Magasin</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>c0732317-563e-4f44-b87c-b25a0e4d8985</td>\n",
       "      <td>35</td>\n",
       "      <td>Femme</td>\n",
       "      <td>Jouets</td>\n",
       "      <td>48.57</td>\n",
       "      <td>2023-08-03</td>\n",
       "      <td>4</td>\n",
       "      <td>Magasin</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>c0732317-563e-4f44-b87c-b25a0e4d8985</td>\n",
       "      <td>35</td>\n",
       "      <td>Femme</td>\n",
       "      <td>Alimentation</td>\n",
       "      <td>252.11</td>\n",
       "      <td>2023-06-01</td>\n",
       "      <td>1</td>\n",
       "      <td>Magasin</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80124</th>\n",
       "      <td>28d88910-3577-4da8-9967-60f00fe41337</td>\n",
       "      <td>42</td>\n",
       "      <td>Homme</td>\n",
       "      <td>Alimentation</td>\n",
       "      <td>526.19</td>\n",
       "      <td>2023-10-08</td>\n",
       "      <td>4</td>\n",
       "      <td>Magasin</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80125</th>\n",
       "      <td>28d88910-3577-4da8-9967-60f00fe41337</td>\n",
       "      <td>42</td>\n",
       "      <td>Homme</td>\n",
       "      <td>Électronique</td>\n",
       "      <td>376.45</td>\n",
       "      <td>2023-05-02</td>\n",
       "      <td>1</td>\n",
       "      <td>Online</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80126</th>\n",
       "      <td>28d88910-3577-4da8-9967-60f00fe41337</td>\n",
       "      <td>42</td>\n",
       "      <td>Homme</td>\n",
       "      <td>Vêtements</td>\n",
       "      <td>383.99</td>\n",
       "      <td>2023-12-25</td>\n",
       "      <td>1</td>\n",
       "      <td>Magasin</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80127</th>\n",
       "      <td>28d88910-3577-4da8-9967-60f00fe41337</td>\n",
       "      <td>42</td>\n",
       "      <td>Homme</td>\n",
       "      <td>Jouets</td>\n",
       "      <td>482.81</td>\n",
       "      <td>2023-05-25</td>\n",
       "      <td>4</td>\n",
       "      <td>Online</td>\n",
       "      <td>92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80128</th>\n",
       "      <td>28d88910-3577-4da8-9967-60f00fe41337</td>\n",
       "      <td>42</td>\n",
       "      <td>Homme</td>\n",
       "      <td>Vêtements</td>\n",
       "      <td>658.98</td>\n",
       "      <td>2023-10-26</td>\n",
       "      <td>3</td>\n",
       "      <td>Magasin</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>80129 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            ID Consommateur  Âge   Sexe  \\\n",
       "0      c0732317-563e-4f44-b87c-b25a0e4d8985   35  Femme   \n",
       "1      c0732317-563e-4f44-b87c-b25a0e4d8985   35  Femme   \n",
       "2      c0732317-563e-4f44-b87c-b25a0e4d8985   35  Femme   \n",
       "3      c0732317-563e-4f44-b87c-b25a0e4d8985   35  Femme   \n",
       "4      c0732317-563e-4f44-b87c-b25a0e4d8985   35  Femme   \n",
       "...                                     ...  ...    ...   \n",
       "80124  28d88910-3577-4da8-9967-60f00fe41337   42  Homme   \n",
       "80125  28d88910-3577-4da8-9967-60f00fe41337   42  Homme   \n",
       "80126  28d88910-3577-4da8-9967-60f00fe41337   42  Homme   \n",
       "80127  28d88910-3577-4da8-9967-60f00fe41337   42  Homme   \n",
       "80128  28d88910-3577-4da8-9967-60f00fe41337   42  Homme   \n",
       "\n",
       "      Catégorie de produit acheté  Prix du produit Date d'achat  Quantité  \\\n",
       "0                    Alimentation           541.85   2023-11-21         2   \n",
       "1                    Électronique           854.76   2023-06-15         2   \n",
       "2                    Alimentation           169.68   2024-04-05         3   \n",
       "3                          Jouets            48.57   2023-08-03         4   \n",
       "4                    Alimentation           252.11   2023-06-01         1   \n",
       "...                           ...              ...          ...       ...   \n",
       "80124                Alimentation           526.19   2023-10-08         4   \n",
       "80125                Électronique           376.45   2023-05-02         1   \n",
       "80126                   Vêtements           383.99   2023-12-25         1   \n",
       "80127                      Jouets           482.81   2023-05-25         4   \n",
       "80128                   Vêtements           658.98   2023-10-26         3   \n",
       "\n",
       "      Canal d'achat  Engagement sur les réseaux sociaux  \n",
       "0           Magasin                                  99  \n",
       "1            Online                                  31  \n",
       "2           Magasin                                  66  \n",
       "3           Magasin                                  38  \n",
       "4           Magasin                                  81  \n",
       "...             ...                                 ...  \n",
       "80124       Magasin                                  51  \n",
       "80125        Online                                  10  \n",
       "80126       Magasin                                  74  \n",
       "80127        Online                                  92  \n",
       "80128       Magasin                                  40  \n",
       "\n",
       "[80129 rows x 9 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ae118387-fcba-4073-a0b8-439458e5a3f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID Consommateur</th>\n",
       "      <th>Âge</th>\n",
       "      <th>Sexe</th>\n",
       "      <th>Catégorie de produit acheté</th>\n",
       "      <th>Prix du produit</th>\n",
       "      <th>Date d'achat</th>\n",
       "      <th>Quantité</th>\n",
       "      <th>Canal d'achat</th>\n",
       "      <th>Engagement sur les réseaux sociaux</th>\n",
       "      <th>depense_totale</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>c0732317-563e-4f44-b87c-b25a0e4d8985</td>\n",
       "      <td>35</td>\n",
       "      <td>Femme</td>\n",
       "      <td>Alimentation</td>\n",
       "      <td>541.85</td>\n",
       "      <td>2023-11-21</td>\n",
       "      <td>2</td>\n",
       "      <td>Magasin</td>\n",
       "      <td>99</td>\n",
       "      <td>1083.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>c0732317-563e-4f44-b87c-b25a0e4d8985</td>\n",
       "      <td>35</td>\n",
       "      <td>Femme</td>\n",
       "      <td>Électronique</td>\n",
       "      <td>854.76</td>\n",
       "      <td>2023-06-15</td>\n",
       "      <td>2</td>\n",
       "      <td>Online</td>\n",
       "      <td>31</td>\n",
       "      <td>1709.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>c0732317-563e-4f44-b87c-b25a0e4d8985</td>\n",
       "      <td>35</td>\n",
       "      <td>Femme</td>\n",
       "      <td>Alimentation</td>\n",
       "      <td>169.68</td>\n",
       "      <td>2024-04-05</td>\n",
       "      <td>3</td>\n",
       "      <td>Magasin</td>\n",
       "      <td>66</td>\n",
       "      <td>509.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>c0732317-563e-4f44-b87c-b25a0e4d8985</td>\n",
       "      <td>35</td>\n",
       "      <td>Femme</td>\n",
       "      <td>Jouets</td>\n",
       "      <td>48.57</td>\n",
       "      <td>2023-08-03</td>\n",
       "      <td>4</td>\n",
       "      <td>Magasin</td>\n",
       "      <td>38</td>\n",
       "      <td>194.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>c0732317-563e-4f44-b87c-b25a0e4d8985</td>\n",
       "      <td>35</td>\n",
       "      <td>Femme</td>\n",
       "      <td>Alimentation</td>\n",
       "      <td>252.11</td>\n",
       "      <td>2023-06-01</td>\n",
       "      <td>1</td>\n",
       "      <td>Magasin</td>\n",
       "      <td>81</td>\n",
       "      <td>252.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80124</th>\n",
       "      <td>28d88910-3577-4da8-9967-60f00fe41337</td>\n",
       "      <td>42</td>\n",
       "      <td>Homme</td>\n",
       "      <td>Alimentation</td>\n",
       "      <td>526.19</td>\n",
       "      <td>2023-10-08</td>\n",
       "      <td>4</td>\n",
       "      <td>Magasin</td>\n",
       "      <td>51</td>\n",
       "      <td>2104.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80125</th>\n",
       "      <td>28d88910-3577-4da8-9967-60f00fe41337</td>\n",
       "      <td>42</td>\n",
       "      <td>Homme</td>\n",
       "      <td>Électronique</td>\n",
       "      <td>376.45</td>\n",
       "      <td>2023-05-02</td>\n",
       "      <td>1</td>\n",
       "      <td>Online</td>\n",
       "      <td>10</td>\n",
       "      <td>376.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80126</th>\n",
       "      <td>28d88910-3577-4da8-9967-60f00fe41337</td>\n",
       "      <td>42</td>\n",
       "      <td>Homme</td>\n",
       "      <td>Vêtements</td>\n",
       "      <td>383.99</td>\n",
       "      <td>2023-12-25</td>\n",
       "      <td>1</td>\n",
       "      <td>Magasin</td>\n",
       "      <td>74</td>\n",
       "      <td>383.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80127</th>\n",
       "      <td>28d88910-3577-4da8-9967-60f00fe41337</td>\n",
       "      <td>42</td>\n",
       "      <td>Homme</td>\n",
       "      <td>Jouets</td>\n",
       "      <td>482.81</td>\n",
       "      <td>2023-05-25</td>\n",
       "      <td>4</td>\n",
       "      <td>Online</td>\n",
       "      <td>92</td>\n",
       "      <td>1931.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80128</th>\n",
       "      <td>28d88910-3577-4da8-9967-60f00fe41337</td>\n",
       "      <td>42</td>\n",
       "      <td>Homme</td>\n",
       "      <td>Vêtements</td>\n",
       "      <td>658.98</td>\n",
       "      <td>2023-10-26</td>\n",
       "      <td>3</td>\n",
       "      <td>Magasin</td>\n",
       "      <td>40</td>\n",
       "      <td>1976.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>80129 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            ID Consommateur  Âge   Sexe  \\\n",
       "0      c0732317-563e-4f44-b87c-b25a0e4d8985   35  Femme   \n",
       "1      c0732317-563e-4f44-b87c-b25a0e4d8985   35  Femme   \n",
       "2      c0732317-563e-4f44-b87c-b25a0e4d8985   35  Femme   \n",
       "3      c0732317-563e-4f44-b87c-b25a0e4d8985   35  Femme   \n",
       "4      c0732317-563e-4f44-b87c-b25a0e4d8985   35  Femme   \n",
       "...                                     ...  ...    ...   \n",
       "80124  28d88910-3577-4da8-9967-60f00fe41337   42  Homme   \n",
       "80125  28d88910-3577-4da8-9967-60f00fe41337   42  Homme   \n",
       "80126  28d88910-3577-4da8-9967-60f00fe41337   42  Homme   \n",
       "80127  28d88910-3577-4da8-9967-60f00fe41337   42  Homme   \n",
       "80128  28d88910-3577-4da8-9967-60f00fe41337   42  Homme   \n",
       "\n",
       "      Catégorie de produit acheté  Prix du produit Date d'achat  Quantité  \\\n",
       "0                    Alimentation           541.85   2023-11-21         2   \n",
       "1                    Électronique           854.76   2023-06-15         2   \n",
       "2                    Alimentation           169.68   2024-04-05         3   \n",
       "3                          Jouets            48.57   2023-08-03         4   \n",
       "4                    Alimentation           252.11   2023-06-01         1   \n",
       "...                           ...              ...          ...       ...   \n",
       "80124                Alimentation           526.19   2023-10-08         4   \n",
       "80125                Électronique           376.45   2023-05-02         1   \n",
       "80126                   Vêtements           383.99   2023-12-25         1   \n",
       "80127                      Jouets           482.81   2023-05-25         4   \n",
       "80128                   Vêtements           658.98   2023-10-26         3   \n",
       "\n",
       "      Canal d'achat  Engagement sur les réseaux sociaux  depense_totale  \n",
       "0           Magasin                                  99         1083.70  \n",
       "1            Online                                  31         1709.52  \n",
       "2           Magasin                                  66          509.04  \n",
       "3           Magasin                                  38          194.28  \n",
       "4           Magasin                                  81          252.11  \n",
       "...             ...                                 ...             ...  \n",
       "80124       Magasin                                  51         2104.76  \n",
       "80125        Online                                  10          376.45  \n",
       "80126       Magasin                                  74          383.99  \n",
       "80127        Online                                  92         1931.24  \n",
       "80128       Magasin                                  40         1976.94  \n",
       "\n",
       "[80129 rows x 10 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    " #Multiplier les deux colonnes\n",
    "df['depense_totale'] = df['Prix du produit'] * df['Quantité']\n",
    "\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "95c19876-7438-456a-8f2b-1c1f83cf731d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.linear_model  import LinearRegression\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import mean_squared_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "c3ff8091-0f58-4482-b886-4fe02e3b82f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sexe\n",
      "Homme    51.118821\n",
      "Femme    48.881179\n",
      "Name: proportion, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Supposons que ta colonne de sexe s'appelle 'Sexe'\n",
    "# Remplace 'Sexe' par le nom exact de la colonne dans ton DataFrame\n",
    "distribution_sexe = df['Sexe'].value_counts(normalize=True) * 100\n",
    "\n",
    "print(distribution_sexe)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "0be49ce9-00fb-4909-a591-c4da3b16c002",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sexe\n",
      "Homme    0.511188\n",
      "Femme    0.488812\n",
      "Name: proportion, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Supposons que ta colonne de sexe s'appelle 'Sexe'\n",
    "# Remplace 'Sexe' par le nom exact de la colonne dans ton DataFrame\n",
    "tri_a_plat = df['Sexe'].value_counts(normalize=True)\n",
    "\n",
    "print(tri_a_plat)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "19a9e443-ec7a-460c-bb72-4e5e3bc58f25",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sexe\n",
      "Homme    40961\n",
      "Femme    39168\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Supposons que ta colonne de sexe s'appelle 'Sexe'\n",
    "# Remplace 'Sexe' par le nom exact de la colonne dans ton DataFrame\n",
    "tri_a_plat = df['Sexe'].value_counts()\n",
    "\n",
    "print(tri_a_plat)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "08bf274a-19fa-487c-83bd-d8dae88c0fa1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tri à plat pour la colonne 'ID Consommateur':\n",
      "ID Consommateur\n",
      "7fbc57cf-e646-4309-ae5c-bda78440647c    0.018720\n",
      "32e03a8f-7ea8-4dab-9ab9-ddec2c69cc13    0.018720\n",
      "be8ed113-fc49-4056-9929-7188852a782f    0.018720\n",
      "cdc41634-c773-407e-af95-706087db16e6    0.018720\n",
      "14abd89f-cae7-4f32-a4a1-250d9c3ed79c    0.018720\n",
      "                                          ...   \n",
      "68ebd411-d9e2-4e85-9775-a49f3649c744    0.001248\n",
      "f2ce6c4d-1e54-480f-9892-91bcd9c95e25    0.001248\n",
      "c672687c-e876-47ca-b5ec-01eef83962da    0.001248\n",
      "488a791e-f8a8-40e9-9fb4-7e95fbcf8c67    0.001248\n",
      "61e94705-402f-468a-bcca-97550d45f0ba    0.001248\n",
      "Name: proportion, Length: 10000, dtype: float64\n",
      "\n",
      "\n",
      "Tri à plat pour la colonne 'Âge':\n",
      "Âge\n",
      "46    2.242634\n",
      "27    2.180234\n",
      "52    2.175242\n",
      "41    2.162763\n",
      "59    2.137803\n",
      "63    2.132811\n",
      "68    2.125323\n",
      "60    2.081643\n",
      "39    2.054188\n",
      "48    2.047948\n",
      "44    2.046700\n",
      "28    1.998028\n",
      "40    1.993036\n",
      "51    1.990540\n",
      "30    1.986796\n",
      "56    1.978060\n",
      "43    1.974316\n",
      "33    1.954349\n",
      "66    1.953101\n",
      "24    1.950605\n",
      "54    1.936877\n",
      "25    1.931885\n",
      "67    1.931885\n",
      "34    1.929389\n",
      "53    1.928141\n",
      "35    1.921901\n",
      "31    1.913165\n",
      "50    1.896941\n",
      "38    1.896941\n",
      "45    1.891949\n",
      "64    1.890701\n",
      "42    1.889453\n",
      "58    1.880717\n",
      "26    1.864494\n",
      "19    1.852014\n",
      "55    1.844526\n",
      "47    1.840782\n",
      "61    1.830798\n",
      "21    1.819566\n",
      "18    1.813326\n",
      "36    1.813326\n",
      "57    1.800846\n",
      "49    1.798350\n",
      "69    1.798350\n",
      "62    1.795854\n",
      "20    1.779630\n",
      "22    1.775886\n",
      "32    1.770894\n",
      "29    1.712239\n",
      "65    1.708495\n",
      "37    1.702255\n",
      "23    1.672303\n",
      "Name: proportion, dtype: float64\n",
      "\n",
      "\n",
      "Tri à plat pour la colonne 'Sexe':\n",
      "Sexe\n",
      "Homme    51.118821\n",
      "Femme    48.881179\n",
      "Name: proportion, dtype: float64\n",
      "\n",
      "\n",
      "Tri à plat pour la colonne 'Catégorie de produit acheté':\n",
      "Catégorie de produit acheté\n",
      "Vêtements       20.116312\n",
      "Alimentation    20.100089\n",
      "Électronique    20.011481\n",
      "Jouets          19.904155\n",
      "Maison          19.867963\n",
      "Name: proportion, dtype: float64\n",
      "\n",
      "\n",
      "Tri à plat pour la colonne 'Prix du produit':\n",
      "Prix du produit\n",
      "187.51    0.009984\n",
      "886.01    0.008736\n",
      "821.17    0.007488\n",
      "341.74    0.007488\n",
      "355.55    0.007488\n",
      "            ...   \n",
      "306.07    0.001248\n",
      "645.57    0.001248\n",
      "751.42    0.001248\n",
      "138.85    0.001248\n",
      "526.19    0.001248\n",
      "Name: proportion, Length: 54951, dtype: float64\n",
      "\n",
      "\n",
      "Tri à plat pour la colonne 'Date d'achat':\n",
      "Date d'achat\n",
      "2023-08-31    0.321981\n",
      "2023-12-27    0.320733\n",
      "2024-04-07    0.320733\n",
      "2024-03-20    0.318237\n",
      "2024-02-07    0.316989\n",
      "                ...   \n",
      "2024-04-08    0.234622\n",
      "2023-04-19    0.233374\n",
      "2023-12-31    0.229630\n",
      "2023-04-20    0.227134\n",
      "2023-05-18    0.227134\n",
      "Name: proportion, Length: 366, dtype: float64\n",
      "\n",
      "\n",
      "Tri à plat pour la colonne 'Quantité':\n",
      "Quantité\n",
      "3    25.281733\n",
      "1    25.087047\n",
      "4    24.828714\n",
      "2    24.802506\n",
      "Name: proportion, dtype: float64\n",
      "\n",
      "\n",
      "Tri à plat pour la colonne 'Canal d'achat':\n",
      "Canal d'achat\n",
      "Magasin    50.066767\n",
      "Online     49.933233\n",
      "Name: proportion, dtype: float64\n",
      "\n",
      "\n",
      "Tri à plat pour la colonne 'Engagement sur les réseaux sociaux':\n",
      "Engagement sur les réseaux sociaux\n",
      "39    1.079509\n",
      "74    1.072021\n",
      "56    1.067029\n",
      "19    1.067029\n",
      "38    1.064533\n",
      "        ...   \n",
      "86    0.945975\n",
      "63    0.942231\n",
      "54    0.937239\n",
      "60    0.934743\n",
      "13    0.933495\n",
      "Name: proportion, Length: 100, dtype: float64\n",
      "\n",
      "\n",
      "Tri à plat pour la colonne 'depense_totale':\n",
      "depense_totale\n",
      "477.84     0.007488\n",
      "148.64     0.007488\n",
      "396.12     0.006240\n",
      "309.12     0.006240\n",
      "245.16     0.006240\n",
      "             ...   \n",
      "35.48      0.001248\n",
      "1999.48    0.001248\n",
      "1826.97    0.001248\n",
      "341.47     0.001248\n",
      "1976.94    0.001248\n",
      "Name: proportion, Length: 66753, dtype: float64\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Fonction pour réaliser un tri à plat pour chaque colonne\n",
    "def tri_a_plat(df):\n",
    "    result = {}\n",
    "    for column in df.columns:\n",
    "        result[column] = df[column].value_counts(normalize=True) * 100\n",
    "    return result\n",
    "\n",
    "# Appliquer la fonction à ton DataFrame\n",
    "tri_a_plat_result = tri_a_plat(df)\n",
    "\n",
    "# Afficher les résultats\n",
    "for column, freq in tri_a_plat_result.items():\n",
    "    print(f\"Tri à plat pour la colonne '{column}':\")\n",
    "    print(freq)\n",
    "    print(\"\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "8c37fc86-385f-41c1-8b7a-141a42719515",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Âge  Nombre  Pourcentage\n",
      "0    46    1797     2.242634\n",
      "1    27    1747     2.180234\n",
      "2    52    1743     2.175242\n",
      "3    41    1733     2.162763\n",
      "4    59    1713     2.137803\n",
      "5    63    1709     2.132811\n",
      "6    68    1703     2.125323\n",
      "7    60    1668     2.081643\n",
      "8    39    1646     2.054188\n",
      "9    48    1641     2.047948\n",
      "10   44    1640     2.046700\n",
      "11   28    1601     1.998028\n",
      "12   40    1597     1.993036\n",
      "13   51    1595     1.990540\n",
      "14   30    1592     1.986796\n",
      "15   56    1585     1.978060\n",
      "16   43    1582     1.974316\n",
      "17   33    1566     1.954349\n",
      "18   66    1565     1.953101\n",
      "19   24    1563     1.950605\n",
      "20   54    1552     1.936877\n",
      "21   25    1548     1.931885\n",
      "22   67    1548     1.931885\n",
      "23   34    1546     1.929389\n",
      "24   53    1545     1.928141\n",
      "25   35    1540     1.921901\n",
      "26   31    1533     1.913165\n",
      "27   50    1520     1.896941\n",
      "28   38    1520     1.896941\n",
      "29   45    1516     1.891949\n",
      "30   64    1515     1.890701\n",
      "31   42    1514     1.889453\n",
      "32   58    1507     1.880717\n",
      "33   26    1494     1.864494\n",
      "34   19    1484     1.852014\n",
      "35   55    1478     1.844526\n",
      "36   47    1475     1.840782\n",
      "37   61    1467     1.830798\n",
      "38   21    1458     1.819566\n",
      "39   18    1453     1.813326\n",
      "40   36    1453     1.813326\n",
      "41   57    1443     1.800846\n",
      "42   49    1441     1.798350\n",
      "43   69    1441     1.798350\n",
      "44   62    1439     1.795854\n",
      "45   20    1426     1.779630\n",
      "46   22    1423     1.775886\n",
      "47   32    1419     1.770894\n",
      "48   29    1372     1.712239\n",
      "49   65    1369     1.708495\n",
      "50   37    1364     1.702255\n",
      "51   23    1340     1.672303\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Supposons que ta colonne d'âge s'appelle 'Âge'\n",
    "# Remplace 'Âge' par le nom exact de la colonne dans ton DataFrame\n",
    "tri_a_plat_age = df['Âge'].value_counts().reset_index()\n",
    "tri_a_plat_age.columns = ['Âge', 'Nombre']\n",
    "\n",
    "# Calcul des pourcentages\n",
    "tri_a_plat_age['Pourcentage'] = (tri_a_plat_age['Nombre'] / df['Âge'].count()) * 100\n",
    "\n",
    "print(tri_a_plat_age)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "34697348-4fe1-49a6-b23b-3a7247eab789",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Catégorie de produit acheté  Fréquence (%)\n",
      "0                   Vêtements      20.116312\n",
      "1                Alimentation      20.100089\n",
      "2                Électronique      20.011481\n",
      "3                      Jouets      19.904155\n",
      "4                      Maison      19.867963\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Supposons que ta colonne de catégorie de produit s'appelle 'Catégorie de produit acheté'\n",
    "# Remplace 'Catégorie de produit acheté' par le nom exact de la colonne dans ton DataFrame\n",
    "tri_a_plat_categorie = df['Catégorie de produit acheté'].value_counts(normalize=True).reset_index()\n",
    "tri_a_plat_categorie.columns = ['Catégorie de produit acheté', 'Fréquence (%)']\n",
    "tri_a_plat_categorie['Fréquence (%)'] *= 100\n",
    "\n",
    "print(tri_a_plat_categorie)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "bb330761-8589-4c9a-9c88-365bdaa33bec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Prix du produit  Fréquence (%)\n",
      "0               187.51       0.009984\n",
      "1               886.01       0.008736\n",
      "2               821.17       0.007488\n",
      "3               341.74       0.007488\n",
      "4               355.55       0.007488\n",
      "...                ...            ...\n",
      "54946           306.07       0.001248\n",
      "54947           645.57       0.001248\n",
      "54948           751.42       0.001248\n",
      "54949           138.85       0.001248\n",
      "54950           526.19       0.001248\n",
      "\n",
      "[54951 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Supposons que ta colonne de prix de produit s'appelle 'Prix du produit'\n",
    "# Remplace 'Prix du produit' par le nom exact de la colonne dans ton DataFrame\n",
    "tri_a_plat_prix = df['Prix du produit'].value_counts(normalize=True).reset_index()\n",
    "tri_a_plat_prix.columns = ['Prix du produit', 'Fréquence (%)']\n",
    "tri_a_plat_prix['Fréquence (%)'] *= 100\n",
    "\n",
    "print(tri_a_plat_prix)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "0a13671d-8e22-4b21-8cde-e4a7ea083add",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Canal d'achat  Fréquence (%)\n",
      "0       Magasin      50.066767\n",
      "1        Online      49.933233\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Supposons que ta colonne de canal d'achat s'appelle 'Canal d'achat'\n",
    "# Remplace 'Canal d'achat' par le nom exact de la colonne dans ton DataFrame\n",
    "tri_a_plat_canal = df['Canal d\\'achat'].value_counts(normalize=True).reset_index()\n",
    "tri_a_plat_canal.columns = ['Canal d\\'achat', 'Fréquence (%)']\n",
    "tri_a_plat_canal['Fréquence (%)'] *= 100\n",
    "\n",
    "print(tri_a_plat_canal)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "59dc9b7e-c53a-4d5e-b246-3ebec9631cb4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Sexe  Fréquence (%)\n",
      "0  Homme      51.118821\n",
      "1  Femme      48.881179\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Supposons que ta colonne de sexe s'appelle 'Sexe'\n",
    "# Remplace 'Sexe' par le nom exact de la colonne dans ton DataFrame\n",
    "tri_a_plat_sexe = df['Sexe'].value_counts(normalize=True).reset_index()\n",
    "tri_a_plat_sexe.columns = ['Sexe', 'Fréquence (%)']\n",
    "tri_a_plat_sexe['Fréquence (%)'] *= 100\n",
    "\n",
    "print(tri_a_plat_sexe)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "bf065001-3eb3-49e3-808d-e500e6a869c8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Âge  Fréquence (%)\n",
      "39   18       1.813326\n",
      "34   19       1.852014\n",
      "45   20       1.779630\n",
      "38   21       1.819566\n",
      "46   22       1.775886\n",
      "51   23       1.672303\n",
      "19   24       1.950605\n",
      "21   25       1.931885\n",
      "33   26       1.864494\n",
      "1    27       2.180234\n",
      "11   28       1.998028\n",
      "48   29       1.712239\n",
      "14   30       1.986796\n",
      "26   31       1.913165\n",
      "47   32       1.770894\n",
      "17   33       1.954349\n",
      "23   34       1.929389\n",
      "25   35       1.921901\n",
      "40   36       1.813326\n",
      "50   37       1.702255\n",
      "28   38       1.896941\n",
      "8    39       2.054188\n",
      "12   40       1.993036\n",
      "3    41       2.162763\n",
      "31   42       1.889453\n",
      "16   43       1.974316\n",
      "10   44       2.046700\n",
      "29   45       1.891949\n",
      "0    46       2.242634\n",
      "36   47       1.840782\n",
      "9    48       2.047948\n",
      "42   49       1.798350\n",
      "27   50       1.896941\n",
      "13   51       1.990540\n",
      "2    52       2.175242\n",
      "24   53       1.928141\n",
      "20   54       1.936877\n",
      "35   55       1.844526\n",
      "15   56       1.978060\n",
      "41   57       1.800846\n",
      "32   58       1.880717\n",
      "4    59       2.137803\n",
      "7    60       2.081643\n",
      "37   61       1.830798\n",
      "44   62       1.795854\n",
      "5    63       2.132811\n",
      "30   64       1.890701\n",
      "49   65       1.708495\n",
      "18   66       1.953101\n",
      "22   67       1.931885\n",
      "6    68       2.125323\n",
      "43   69       1.798350\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Supposons que ta colonne d'âge s'appelle 'Âge'\n",
    "# Remplace 'Âge' par le nom exact de la colonne dans ton DataFrame\n",
    "tri_a_plat_age = df['Âge'].value_counts(normalize=True).reset_index()\n",
    "tri_a_plat_age.columns = ['Âge', 'Fréquence (%)']\n",
    "tri_a_plat_age['Fréquence (%)'] *= 100\n",
    "tri_a_plat_age = tri_a_plat_age.sort_values(by='Âge')\n",
    "\n",
    "print(tri_a_plat_age)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d484f50d-1da4-48f4-be6b-ca104d438d13",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "scale = LabelEncoder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fca4ee46-de10-45ea-b0d3-2dc3e49816e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in df.describe(include = 'O'):\n",
    "    df[i] = scale.fit_transform(df[i]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8a217aff-fa61-482e-8bce-f4d8e3f7544b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID Consommateur</th>\n",
       "      <th>Âge</th>\n",
       "      <th>Sexe</th>\n",
       "      <th>Catégorie de produit acheté</th>\n",
       "      <th>Prix du produit</th>\n",
       "      <th>Date d'achat</th>\n",
       "      <th>Quantité</th>\n",
       "      <th>Canal d'achat</th>\n",
       "      <th>Engagement sur les réseaux sociaux</th>\n",
       "      <th>depense_totale</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7482</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>541.85</td>\n",
       "      <td>2023-11-21</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>99</td>\n",
       "      <td>1083.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7482</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>854.76</td>\n",
       "      <td>2023-06-15</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>31</td>\n",
       "      <td>1709.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7482</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>169.68</td>\n",
       "      <td>2024-04-05</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>66</td>\n",
       "      <td>509.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7482</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>48.57</td>\n",
       "      <td>2023-08-03</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>194.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7482</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>252.11</td>\n",
       "      <td>2023-06-01</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>81</td>\n",
       "      <td>252.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>3378</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>18.09</td>\n",
       "      <td>2023-07-26</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>74</td>\n",
       "      <td>54.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>3378</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>130.12</td>\n",
       "      <td>2023-10-05</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>14</td>\n",
       "      <td>520.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>2201</td>\n",
       "      <td>38</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>731.44</td>\n",
       "      <td>2023-12-27</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>26</td>\n",
       "      <td>731.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>1488</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>560.18</td>\n",
       "      <td>2023-08-08</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>80</td>\n",
       "      <td>560.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1488</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>74.85</td>\n",
       "      <td>2024-04-10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>149.70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ID Consommateur  Âge  Sexe  Catégorie de produit acheté  Prix du produit  \\\n",
       "0               7482   35     0                            0           541.85   \n",
       "1               7482   35     0                            4           854.76   \n",
       "2               7482   35     0                            0           169.68   \n",
       "3               7482   35     0                            1            48.57   \n",
       "4               7482   35     0                            0           252.11   \n",
       "..               ...  ...   ...                          ...              ...   \n",
       "995             3378   30     0                            3            18.09   \n",
       "996             3378   30     0                            2           130.12   \n",
       "997             2201   38     1                            3           731.44   \n",
       "998             1488   61     0                            2           560.18   \n",
       "999             1488   61     0                            0            74.85   \n",
       "\n",
       "    Date d'achat  Quantité  Canal d'achat  Engagement sur les réseaux sociaux  \\\n",
       "0     2023-11-21         2              0                                  99   \n",
       "1     2023-06-15         2              1                                  31   \n",
       "2     2024-04-05         3              0                                  66   \n",
       "3     2023-08-03         4              0                                  38   \n",
       "4     2023-06-01         1              0                                  81   \n",
       "..           ...       ...            ...                                 ...   \n",
       "995   2023-07-26         3              1                                  74   \n",
       "996   2023-10-05         4              1                                  14   \n",
       "997   2023-12-27         1              1                                  26   \n",
       "998   2023-08-08         1              1                                  80   \n",
       "999   2024-04-10         2              0                                   1   \n",
       "\n",
       "     depense_totale  \n",
       "0           1083.70  \n",
       "1           1709.52  \n",
       "2            509.04  \n",
       "3            194.28  \n",
       "4            252.11  \n",
       "..              ...  \n",
       "995           54.27  \n",
       "996          520.48  \n",
       "997          731.44  \n",
       "998          560.18  \n",
       "999          149.70  \n",
       "\n",
       "[1000 rows x 10 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d6a663f0-8c49-47f1-964a-b3638237b4e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#supprimons les colonenes dont on ne veut pas pour faire la prediction\n",
    "x = df.drop(['Date d\\'achat','ID Consommateur','Quantité'],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dd43a6f8-8916-406b-b4c8-8a1dc125f416",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Âge</th>\n",
       "      <th>Sexe</th>\n",
       "      <th>Catégorie de produit acheté</th>\n",
       "      <th>Prix du produit</th>\n",
       "      <th>Canal d'achat</th>\n",
       "      <th>Engagement sur les réseaux sociaux</th>\n",
       "      <th>depense_totale</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>541.85</td>\n",
       "      <td>0</td>\n",
       "      <td>99</td>\n",
       "      <td>1083.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>854.76</td>\n",
       "      <td>1</td>\n",
       "      <td>31</td>\n",
       "      <td>1709.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>169.68</td>\n",
       "      <td>0</td>\n",
       "      <td>66</td>\n",
       "      <td>509.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>48.57</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>194.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>252.11</td>\n",
       "      <td>0</td>\n",
       "      <td>81</td>\n",
       "      <td>252.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>248.65</td>\n",
       "      <td>0</td>\n",
       "      <td>88</td>\n",
       "      <td>248.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>228.83</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>457.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>651.61</td>\n",
       "      <td>0</td>\n",
       "      <td>86</td>\n",
       "      <td>1303.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>339.28</td>\n",
       "      <td>0</td>\n",
       "      <td>82</td>\n",
       "      <td>1357.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>267.63</td>\n",
       "      <td>0</td>\n",
       "      <td>86</td>\n",
       "      <td>802.89</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Âge  Sexe  Catégorie de produit acheté  Prix du produit  Canal d'achat  \\\n",
       "0    35     0                            0           541.85              0   \n",
       "1    35     0                            4           854.76              1   \n",
       "2    35     0                            0           169.68              0   \n",
       "3    35     0                            1            48.57              0   \n",
       "4    35     0                            0           252.11              0   \n",
       "..  ...   ...                          ...              ...            ...   \n",
       "95   18     0                            2           248.65              0   \n",
       "96   18     0                            1           228.83              0   \n",
       "97   18     0                            4           651.61              0   \n",
       "98   18     0                            1           339.28              0   \n",
       "99   18     0                            3           267.63              0   \n",
       "\n",
       "    Engagement sur les réseaux sociaux  depense_totale  \n",
       "0                                   99         1083.70  \n",
       "1                                   31         1709.52  \n",
       "2                                   66          509.04  \n",
       "3                                   38          194.28  \n",
       "4                                   81          252.11  \n",
       "..                                 ...             ...  \n",
       "95                                  88          248.65  \n",
       "96                                  12          457.66  \n",
       "97                                  86         1303.22  \n",
       "98                                  82         1357.12  \n",
       "99                                  86          802.89  \n",
       "\n",
       "[100 rows x 7 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.head(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "20d17cf6-dab9-496d-98fa-e175c30088d4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Âge</th>\n",
       "      <th>Sexe</th>\n",
       "      <th>Catégorie de produit acheté</th>\n",
       "      <th>Prix du produit</th>\n",
       "      <th>Canal d'achat</th>\n",
       "      <th>Engagement sur les réseaux sociaux</th>\n",
       "      <th>depense_totale</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>541.85</td>\n",
       "      <td>0</td>\n",
       "      <td>99</td>\n",
       "      <td>1083.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>854.76</td>\n",
       "      <td>1</td>\n",
       "      <td>31</td>\n",
       "      <td>1709.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>169.68</td>\n",
       "      <td>0</td>\n",
       "      <td>66</td>\n",
       "      <td>509.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>48.57</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>194.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>252.11</td>\n",
       "      <td>0</td>\n",
       "      <td>81</td>\n",
       "      <td>252.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80124</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>526.19</td>\n",
       "      <td>0</td>\n",
       "      <td>51</td>\n",
       "      <td>2104.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80125</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>376.45</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>376.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80126</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>383.99</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "      <td>383.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80127</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>482.81</td>\n",
       "      <td>1</td>\n",
       "      <td>92</td>\n",
       "      <td>1931.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80128</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>658.98</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>1976.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>80129 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Âge  Sexe  Catégorie de produit acheté  Prix du produit  Canal d'achat  \\\n",
       "0       35     0                            0           541.85              0   \n",
       "1       35     0                            4           854.76              1   \n",
       "2       35     0                            0           169.68              0   \n",
       "3       35     0                            1            48.57              0   \n",
       "4       35     0                            0           252.11              0   \n",
       "...    ...   ...                          ...              ...            ...   \n",
       "80124   42     1                            0           526.19              0   \n",
       "80125   42     1                            4           376.45              1   \n",
       "80126   42     1                            3           383.99              0   \n",
       "80127   42     1                            1           482.81              1   \n",
       "80128   42     1                            3           658.98              0   \n",
       "\n",
       "       Engagement sur les réseaux sociaux  depense_totale  \n",
       "0                                      99         1083.70  \n",
       "1                                      31         1709.52  \n",
       "2                                      66          509.04  \n",
       "3                                      38          194.28  \n",
       "4                                      81          252.11  \n",
       "...                                   ...             ...  \n",
       "80124                                  51         2104.76  \n",
       "80125                                  10          376.45  \n",
       "80126                                  74          383.99  \n",
       "80127                                  92         1931.24  \n",
       "80128                                  40         1976.94  \n",
       "\n",
       "[80129 rows x 7 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Data = x\n",
    "Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "584ab792-c4e2-4b7f-a453-265be7c99d18",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "429f3d9e-bf6b-4d36-bf9e-0ada59fd4a85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set: (64103, 6)\n",
      "Test set: (16026, 6)\n"
     ]
    }
   ],
   "source": [
    "X = Data.drop(\"depense_totale\", axis = 1)\n",
    "y = Data[\"depense_totale\"]\n",
    "\n",
    "\n",
    "X_train,X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n",
    "\n",
    "print('Train set:', X_train.shape)\n",
    "print('Test set:', X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "da9accc9-90bd-4d2e-b6f5-9af63d0f399e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Âge</th>\n",
       "      <th>Sexe</th>\n",
       "      <th>Catégorie de produit acheté</th>\n",
       "      <th>Prix du produit</th>\n",
       "      <th>Canal d'achat</th>\n",
       "      <th>Engagement sur les réseaux sociaux</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>541.85</td>\n",
       "      <td>0</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>854.76</td>\n",
       "      <td>1</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>169.68</td>\n",
       "      <td>0</td>\n",
       "      <td>66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>48.57</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>252.11</td>\n",
       "      <td>0</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80124</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>526.19</td>\n",
       "      <td>0</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80125</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>376.45</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80126</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>383.99</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80127</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>482.81</td>\n",
       "      <td>1</td>\n",
       "      <td>92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80128</th>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>658.98</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>80129 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Âge  Sexe  Catégorie de produit acheté  Prix du produit  Canal d'achat  \\\n",
       "0       35     0                            0           541.85              0   \n",
       "1       35     0                            4           854.76              1   \n",
       "2       35     0                            0           169.68              0   \n",
       "3       35     0                            1            48.57              0   \n",
       "4       35     0                            0           252.11              0   \n",
       "...    ...   ...                          ...              ...            ...   \n",
       "80124   42     1                            0           526.19              0   \n",
       "80125   42     1                            4           376.45              1   \n",
       "80126   42     1                            3           383.99              0   \n",
       "80127   42     1                            1           482.81              1   \n",
       "80128   42     1                            3           658.98              0   \n",
       "\n",
       "       Engagement sur les réseaux sociaux  \n",
       "0                                      99  \n",
       "1                                      31  \n",
       "2                                      66  \n",
       "3                                      38  \n",
       "4                                      81  \n",
       "...                                   ...  \n",
       "80124                                  51  \n",
       "80125                                  10  \n",
       "80126                                  74  \n",
       "80127                                  92  \n",
       "80128                                  40  \n",
       "\n",
       "[80129 rows x 6 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4e2fc95c-be04-440a-8ec5-bb563eabdb65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.46080891,  0.9778592 ,  0.7068361 ,  0.77508224, -0.99889302,\n",
       "         1.0955293 ],\n",
       "       [-1.32643325,  0.9778592 ,  1.41256026,  1.65935604,  1.00110821,\n",
       "         1.06086718],\n",
       "       [ 1.36108001,  0.9778592 , -1.4103364 ,  1.11477812, -0.99889302,\n",
       "        -1.57345439],\n",
       "       ...,\n",
       "       [ 0.2860747 , -1.02264212, -1.4103364 ,  0.95723851,  1.00110821,\n",
       "         0.0210034 ],\n",
       "       [-0.65455494,  0.9778592 ,  1.41256026, -1.59533042, -0.99889302,\n",
       "        -1.22683313],\n",
       "       [-0.92330626, -1.02264212,  0.7068361 , -0.08107325, -0.99889302,\n",
       "         0.54093529]])"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Normaliser les caractéristiques\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "X_train_scaled\n",
    "X_test_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ec980653-79c7-4c50-99c6-06b755182aa4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "SVR\n",
      "Meilleurs paramètres:\n",
      "{'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\n",
      "Meilleur score:\n",
      "MSE: 440741.2954774755\n",
      "Entraînement:\n",
      "MSE: 438227.27128694317, RMSE: 661.9873648997715, MAE: 503.6101621406286, R²: 0.5296474358743456\n",
      "Test:\n",
      "MSE: 431938.81454877416, RMSE: 657.2205220082329, MAE: 502.38613252004376, R²: 0.5244764275865029\n",
      "\n",
      "RandomForest\n",
      "Meilleurs paramètres:\n",
      "{'max_depth': 10, 'min_samples_leaf': 4, 'min_samples_split': 5, 'n_estimators': 200}\n",
      "Meilleur score:\n",
      "MSE: 421410.3639660928\n",
      "Entraînement:\n",
      "MSE: 389947.29151488974, RMSE: 624.4575978518395, MAE: 483.94190270067855, R²: 0.5814666944408688\n",
      "Test:\n",
      "MSE: 415717.56131412485, RMSE: 644.7616313911094, MAE: 502.13443724556515, R²: 0.5423344853191067\n",
      "\n",
      "LinearRegression\n",
      "Meilleurs paramètres:\n",
      "{}\n",
      "Meilleur score:\n",
      "MSE: 418910.99188749073\n",
      "Entraînement:\n",
      "MSE: 418850.98015256337, RMSE: 647.1869746468661, MAE: 503.867800942946, R²: 0.5504441521342365\n",
      "Test:\n",
      "MSE: 413820.02467373846, RMSE: 643.2884459352107, MAE: 502.1826990216264, R²: 0.5444234927702306\n",
      "\n",
      "Lasso\n",
      "Meilleurs paramètres:\n",
      "{'alpha': 1}\n",
      "Meilleur score:\n",
      "MSE: 418909.6829010144\n",
      "Entraînement:\n",
      "MSE: 418856.4118679484, RMSE: 647.1911710367722, MAE: 503.88521637276966, R²: 0.5504383222340308\n",
      "Test:\n",
      "MSE: 413780.06513587764, RMSE: 643.2573863826809, MAE: 502.18706968965864, R²: 0.5444674844226489\n",
      "\n",
      "Ridge\n",
      "Meilleurs paramètres:\n",
      "{'alpha': 1}\n",
      "Meilleur score:\n",
      "MSE: 418910.99160248775\n",
      "Entraînement:\n",
      "MSE: 418850.980277431, RMSE: 647.1869747433357, MAE: 503.8678092362269, R²: 0.550444152000215\n",
      "Test:\n",
      "MSE: 413819.81365281396, RMSE: 643.2882819178459, MAE: 502.18266546057646, R²: 0.5444237250842077\n",
      "\n",
      "ElasticNet\n",
      "Meilleurs paramètres:\n",
      "{'alpha': 0.1, 'l1_ratio': 0.9}\n",
      "Meilleur score:\n",
      "MSE: 418961.6886773639\n",
      "Entraînement:\n",
      "MSE: 418902.63766222313, RMSE: 647.2268826788819, MAE: 503.90927500780606, R²: 0.5503887077479173\n",
      "Test:\n",
      "MSE: 413733.4991045652, RMSE: 643.2211898752755, MAE: 502.1943720365636, R²: 0.5445187491963088\n",
      "\n",
      "DecisionTree\n",
      "Meilleurs paramètres:\n",
      "{'max_depth': 10, 'min_samples_leaf': 4, 'min_samples_split': 10}\n",
      "Meilleur score:\n",
      "MSE: 438462.54129269917\n",
      "Entraînement:\n",
      "MSE: 400524.70069139835, RMSE: 632.8702084088003, MAE: 484.74575979442983, R²: 0.5701138831168118\n",
      "Test:\n",
      "MSE: 430792.031746496, RMSE: 656.3474931364452, MAE: 506.24301184114785, R²: 0.525738926432529\n",
      "\n",
      "GradientBoosting\n",
      "Meilleurs paramètres:\n",
      "{'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 50}\n",
      "Meilleur score:\n",
      "MSE: 419383.20069792296\n",
      "Entraînement:\n",
      "MSE: 416640.51426122314, RMSE: 645.4769664838732, MAE: 502.3342321754868, R²: 0.5528166614873191\n",
      "Test:\n",
      "MSE: 414357.4389400825, RMSE: 643.7060190335977, MAE: 502.50659201599245, R²: 0.5438318507524489\n",
      "\n",
      "KNeighbors\n",
      "Meilleurs paramètres:\n",
      "{'n_neighbors': 10, 'weights': 'uniform'}\n",
      "Meilleur score:\n",
      "MSE: 465740.190574343\n",
      "Entraînement:\n",
      "MSE: 380310.25582453737, RMSE: 616.6929996558558, MAE: 464.32468970251, R²: 0.5918101959628445\n",
      "Test:\n",
      "MSE: 456488.5994530346, RMSE: 675.6394004593238, MAE: 511.55155060526647, R²: 0.49744944824024495\n",
      "\n",
      "XGBoost\n",
      "Meilleurs paramètres:\n",
      "{'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 50}\n",
      "Meilleur score:\n",
      "MSE: 419521.9660702348\n",
      "Entraînement:\n",
      "MSE: 417616.5010226941, RMSE: 646.2325440758103, MAE: 502.81391689693714, R²: 0.5517691276940376\n",
      "Test:\n",
      "MSE: 414429.05019605, RMSE: 643.7616408237213, MAE: 502.46794431518117, R²: 0.543753013567376\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.svm import SVR\n",
    "from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\n",
    "from sklearn.linear_model import LinearRegression, Lasso, Ridge, ElasticNet\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "# Définir les hyperparamètres pour chaque modèle\n",
    "param_grid = {\n",
    "    \"SVR\": {\n",
    "        \"C\": [0.1, 1, 10],\n",
    "        \"gamma\": [0.01, 0.1, 1],\n",
    "        \"kernel\": ['linear', 'rbf']\n",
    "    },\n",
    "    \"RandomForest\": {\n",
    "        \"n_estimators\": [50, 100, 200],\n",
    "        \"max_depth\": [None, 10, 20],\n",
    "        \"min_samples_split\": [2, 5, 10],\n",
    "        \"min_samples_leaf\": [1, 2, 4]\n",
    "    },\n",
    "    \"LinearRegression\": {},\n",
    "    \"Lasso\": {\n",
    "        \"alpha\": [0.1, 1, 10]\n",
    "    },\n",
    "    \"Ridge\": {\n",
    "        \"alpha\": [0.1, 1, 10]\n",
    "    },\n",
    "    \"ElasticNet\": {\n",
    "        \"alpha\": [0.1, 1, 10],\n",
    "        \"l1_ratio\": [0.1, 0.5, 0.9]\n",
    "    },\n",
    "    \"DecisionTree\": {\n",
    "        \"max_depth\": [None, 10, 20, 30],\n",
    "        \"min_samples_split\": [2, 5, 10],\n",
    "        \"min_samples_leaf\": [1, 2, 4]\n",
    "    },\n",
    "    \"GradientBoosting\": {\n",
    "        \"n_estimators\": [50, 100, 200],\n",
    "        \"learning_rate\": [0.01, 0.1, 0.2],\n",
    "        \"max_depth\": [3, 5, 7]\n",
    "    },\n",
    "    \"KNeighbors\": {\n",
    "        \"n_neighbors\": [3, 5, 10],\n",
    "        \"weights\": ['uniform', 'distance']\n",
    "    },\n",
    "    \"XGBoost\": {\n",
    "        \"n_estimators\": [50, 100, 200],\n",
    "        \"learning_rate\": [0.01, 0.1, 0.2],\n",
    "        \"max_depth\": [3, 5, 7]\n",
    "    }\n",
    "}\n",
    "\n",
    "# Définir les modèles\n",
    "models = {\n",
    "    \"SVR\": SVR(),\n",
    "    \"RandomForest\": RandomForestRegressor(),\n",
    "    \"LinearRegression\": LinearRegression(),\n",
    "    \"Lasso\": Lasso(),\n",
    "    \"Ridge\": Ridge(),\n",
    "    \"ElasticNet\": ElasticNet(),\n",
    "    \"DecisionTree\": DecisionTreeRegressor(),\n",
    "    \"GradientBoosting\": GradientBoostingRegressor(),\n",
    "    \"KNeighbors\": KNeighborsRegressor(),\n",
    "    \"XGBoost\": XGBRegressor()\n",
    "}\n",
    "\n",
    "# Entraîner et évaluer chaque modèle avec GridSearchCV\n",
    "for name, model in models.items():\n",
    "    print(f\"\\n{name}\")\n",
    "\n",
    "    # Créer le GridSearchCV pour le modèle actuel\n",
    "    grid_search = GridSearchCV(estimator=model, param_grid=param_grid[name], cv=5, scoring='neg_mean_squared_error')\n",
    "\n",
    "    # Effectuer la recherche sur la grille\n",
    "    grid_search.fit(X_train_scaled, y_train)\n",
    "\n",
    "    # Meilleurs paramètres et score\n",
    "    best_params = grid_search.best_params_\n",
    "    best_score = -grid_search.best_score_\n",
    "\n",
    "    # Entraîner le modèle avec les meilleurs paramètres\n",
    "    best_model = grid_search.best_estimator_\n",
    "    best_model.fit(X_train_scaled, y_train)\n",
    "\n",
    "    # Faire des prédictions sur les données d'entraînement et de test\n",
    "    y_train_pred = best_model.predict(X_train_scaled)\n",
    "    y_test_pred = best_model.predict(X_test_scaled)\n",
    "\n",
    "    # Calculer les métriques d'évaluation\n",
    "    mse_train = mean_squared_error(y_train, y_train_pred)\n",
    "    rmse_train = np.sqrt(mse_train)\n",
    "    mae_train = mean_absolute_error(y_train, y_train_pred)\n",
    "    r2_train = r2_score(y_train, y_train_pred)\n",
    "\n",
    "    mse_test = mean_squared_error(y_test, y_test_pred)\n",
    "    rmse_test = np.sqrt(mse_test)\n",
    "    mae_test = mean_absolute_error(y_test, y_test_pred)\n",
    "    r2_test = r2_score(y_test, y_test_pred)\n",
    "\n",
    "    # Afficher les résultats\n",
    "    print(\"Meilleurs paramètres:\")\n",
    "    print(best_params)\n",
    "    print(\"Meilleur score:\")\n",
    "    print(f\"MSE: {best_score}\")\n",
    "    print(\"Entraînement:\")\n",
    "    print(f\"MSE: {mse_train}, RMSE: {rmse_train}, MAE: {mae_train}, R²: {r2_train}\")\n",
    "    print(\"Test:\")\n",
    "    print(f\"MSE: {mse_test}, RMSE: {rmse_test}, MAE: {mae_test}, R²: {r2_test}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "98856531-cd0c-406a-8238-9663e31de222",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Données\n",
    "categories = ['Homme', 'Femme']\n",
    "values = [44961, 39168]\n",
    "colors = ['green', 'pink']\n",
    "\n",
    "# Calculer les pourcentages\n",
    "total = sum(values)\n",
    "percentages = [(value / total) * 100 for value in values]\n",
    "\n",
    "# Paramètres pour le graphique\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(111, projection='3d')\n",
    "\n",
    "# Coordonnées\n",
    "x = np.arange(len(categories))\n",
    "y = np.zeros(len(categories))\n",
    "z = np.zeros(len(categories))\n",
    "\n",
    "# Tailles des barres\n",
    "dx = np.ones(len(categories)) * 0.3\n",
    "dy = np.ones(len(categories)) * 0.3\n",
    "dz = percentages\n",
    "\n",
    "# Création des barres\n",
    "ax.bar3d(x, y, z, dx, dy, dz, color=colors, alpha=0.6)\n",
    "\n",
    "# Étiquettes des axes\n",
    "ax.set_xlabel('Sexe')\n",
    "ax.set_ylabel('')\n",
    "ax.set_zlabel('Pourcentage')\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(categories)\n",
    "\n",
    "# Ajout des pourcentages sur les barres\n",
    "for i in range(len(categories)):\n",
    "    ax.text(x[i], y[i], dz[i], '%.1f%%' % dz[i], color='black', ha='center')\n",
    "\n",
    "# Légende\n",
    "ax.legend(['Homme', 'Femme'], loc='upper right')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ce6652e-b883-49c5-a2dd-6d9e999a9e5c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
